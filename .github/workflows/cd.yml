name: CD

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run linting
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest

  release:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
    
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        script: |
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Extract version from tag (e.g., v1.0.0 -> 1.0.0)
          VERSION="${{ github.ref_name }}"
          
          # Stop and remove existing container
          docker stop go-discord-chatgpt || true
          docker rm go-discord-chatgpt || true
          
          # Pull specific version image built by GoReleaser
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          
          # Create config directory if it doesn't exist
          mkdir -p /opt/go-discord-chatgpt
          
          # Create config.yaml from secret
          echo "${{ secrets.BOT_CONFIG }}" > /opt/go-discord-chatgpt/config.yaml
          
          # Run new container with version label
          docker run -d \
            --name go-discord-chatgpt \
            --restart unless-stopped \
            --label "version=$VERSION" \
            --label "deployed=$(date -Iseconds)" \
            -v /opt/go-discord-chatgpt/config.yaml:/app/config.yaml:ro \
            ghcr.io/${{ github.repository }}:$VERSION
          
          # Clean up old images
          docker image prune -f

  snapshot-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.3'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run GoReleaser Snapshot
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --snapshot --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
    
    - name: Deploy snapshot to DigitalOcean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        script: |
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Get short commit SHA for deployment
          COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          # Stop and remove existing container
          docker stop go-discord-chatgpt || true
          docker rm go-discord-chatgpt || true
          
          # Pull snapshot image with commit SHA
          docker pull ghcr.io/${{ github.repository }}:$COMMIT_SHA
          
          # Create config directory if it doesn't exist
          mkdir -p /opt/go-discord-chatgpt
          
          # Create config.yaml from secret
          echo "${{ secrets.BOT_CONFIG }}" > /opt/go-discord-chatgpt/config.yaml
          
          # Run new container with commit SHA version
          docker run -d \
            --name go-discord-chatgpt \
            --restart unless-stopped \
            --label "version=$COMMIT_SHA" \
            --label "deployed=$(date -Iseconds)" \
            -v /opt/go-discord-chatgpt/config.yaml:/app/config.yaml:ro \
            ghcr.io/${{ github.repository }}:$COMMIT_SHA
          
          # Clean up old images
          docker image prune -f
