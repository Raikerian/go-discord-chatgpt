// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package test

import (
	"time"

	"github.com/diamondburned/arikawa/v3/discord"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAudioMixer creates a new instance of MockAudioMixer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudioMixer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudioMixer {
	mock := &MockAudioMixer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAudioMixer is an autogenerated mock type for the AudioMixer type
type MockAudioMixer struct {
	mock.Mock
}

type MockAudioMixer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudioMixer) EXPECT() *MockAudioMixer_Expecter {
	return &MockAudioMixer_Expecter{mock: &_m.Mock}
}

// AddUserAudioWithRTP provides a mock function for the type MockAudioMixer
func (_mock *MockAudioMixer) AddUserAudioWithRTP(userID discord.UserID, audio []byte, timestamp time.Time, rtpTimestamp uint32, sequence uint16) error {
	ret := _mock.Called(userID, audio, timestamp, rtpTimestamp, sequence)

	if len(ret) == 0 {
		panic("no return value specified for AddUserAudioWithRTP")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(discord.UserID, []byte, time.Time, uint32, uint16) error); ok {
		r0 = returnFunc(userID, audio, timestamp, rtpTimestamp, sequence)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAudioMixer_AddUserAudioWithRTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserAudioWithRTP'
type MockAudioMixer_AddUserAudioWithRTP_Call struct {
	*mock.Call
}

// AddUserAudioWithRTP is a helper method to define mock.On call
//   - userID
//   - audio
//   - timestamp
//   - rtpTimestamp
//   - sequence
func (_e *MockAudioMixer_Expecter) AddUserAudioWithRTP(userID interface{}, audio interface{}, timestamp interface{}, rtpTimestamp interface{}, sequence interface{}) *MockAudioMixer_AddUserAudioWithRTP_Call {
	return &MockAudioMixer_AddUserAudioWithRTP_Call{Call: _e.mock.On("AddUserAudioWithRTP", userID, audio, timestamp, rtpTimestamp, sequence)}
}

func (_c *MockAudioMixer_AddUserAudioWithRTP_Call) Run(run func(userID discord.UserID, audio []byte, timestamp time.Time, rtpTimestamp uint32, sequence uint16)) *MockAudioMixer_AddUserAudioWithRTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(discord.UserID), args[1].([]byte), args[2].(time.Time), args[3].(uint32), args[4].(uint16))
	})
	return _c
}

func (_c *MockAudioMixer_AddUserAudioWithRTP_Call) Return(err error) *MockAudioMixer_AddUserAudioWithRTP_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAudioMixer_AddUserAudioWithRTP_Call) RunAndReturn(run func(userID discord.UserID, audio []byte, timestamp time.Time, rtpTimestamp uint32, sequence uint16) error) *MockAudioMixer_AddUserAudioWithRTP_Call {
	_c.Call.Return(run)
	return _c
}

// ClearAllBuffers provides a mock function for the type MockAudioMixer
func (_mock *MockAudioMixer) ClearAllBuffers() {
	_mock.Called()
	return
}

// MockAudioMixer_ClearAllBuffers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearAllBuffers'
type MockAudioMixer_ClearAllBuffers_Call struct {
	*mock.Call
}

// ClearAllBuffers is a helper method to define mock.On call
func (_e *MockAudioMixer_Expecter) ClearAllBuffers() *MockAudioMixer_ClearAllBuffers_Call {
	return &MockAudioMixer_ClearAllBuffers_Call{Call: _e.mock.On("ClearAllBuffers")}
}

func (_c *MockAudioMixer_ClearAllBuffers_Call) Run(run func()) *MockAudioMixer_ClearAllBuffers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAudioMixer_ClearAllBuffers_Call) Return() *MockAudioMixer_ClearAllBuffers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAudioMixer_ClearAllBuffers_Call) RunAndReturn(run func()) *MockAudioMixer_ClearAllBuffers_Call {
	_c.Run(run)
	return _c
}

// ClearUserBuffer provides a mock function for the type MockAudioMixer
func (_mock *MockAudioMixer) ClearUserBuffer(userID discord.UserID) {
	_mock.Called(userID)
	return
}

// MockAudioMixer_ClearUserBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearUserBuffer'
type MockAudioMixer_ClearUserBuffer_Call struct {
	*mock.Call
}

// ClearUserBuffer is a helper method to define mock.On call
//   - userID
func (_e *MockAudioMixer_Expecter) ClearUserBuffer(userID interface{}) *MockAudioMixer_ClearUserBuffer_Call {
	return &MockAudioMixer_ClearUserBuffer_Call{Call: _e.mock.On("ClearUserBuffer", userID)}
}

func (_c *MockAudioMixer_ClearUserBuffer_Call) Run(run func(userID discord.UserID)) *MockAudioMixer_ClearUserBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(discord.UserID))
	})
	return _c
}

func (_c *MockAudioMixer_ClearUserBuffer_Call) Return() *MockAudioMixer_ClearUserBuffer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAudioMixer_ClearUserBuffer_Call) RunAndReturn(run func(userID discord.UserID)) *MockAudioMixer_ClearUserBuffer_Call {
	_c.Run(run)
	return _c
}

// GetAllAvailableMixedAudio provides a mock function for the type MockAudioMixer
func (_mock *MockAudioMixer) GetAllAvailableMixedAudio() ([]byte, time.Duration, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAvailableMixedAudio")
	}

	var r0 []byte
	var r1 time.Duration
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, time.Duration, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() time.Duration); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(time.Duration)
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAudioMixer_GetAllAvailableMixedAudio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAvailableMixedAudio'
type MockAudioMixer_GetAllAvailableMixedAudio_Call struct {
	*mock.Call
}

// GetAllAvailableMixedAudio is a helper method to define mock.On call
func (_e *MockAudioMixer_Expecter) GetAllAvailableMixedAudio() *MockAudioMixer_GetAllAvailableMixedAudio_Call {
	return &MockAudioMixer_GetAllAvailableMixedAudio_Call{Call: _e.mock.On("GetAllAvailableMixedAudio")}
}

func (_c *MockAudioMixer_GetAllAvailableMixedAudio_Call) Run(run func()) *MockAudioMixer_GetAllAvailableMixedAudio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAudioMixer_GetAllAvailableMixedAudio_Call) Return(bytes []byte, duration time.Duration, err error) *MockAudioMixer_GetAllAvailableMixedAudio_Call {
	_c.Call.Return(bytes, duration, err)
	return _c
}

func (_c *MockAudioMixer_GetAllAvailableMixedAudio_Call) RunAndReturn(run func() ([]byte, time.Duration, error)) *MockAudioMixer_GetAllAvailableMixedAudio_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAvailableMixedAudioAndFlush provides a mock function for the type MockAudioMixer
func (_mock *MockAudioMixer) GetAllAvailableMixedAudioAndFlush() ([]byte, time.Duration, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAvailableMixedAudioAndFlush")
	}

	var r0 []byte
	var r1 time.Duration
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, time.Duration, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() time.Duration); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(time.Duration)
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAvailableMixedAudioAndFlush'
type MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call struct {
	*mock.Call
}

// GetAllAvailableMixedAudioAndFlush is a helper method to define mock.On call
func (_e *MockAudioMixer_Expecter) GetAllAvailableMixedAudioAndFlush() *MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call {
	return &MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call{Call: _e.mock.On("GetAllAvailableMixedAudioAndFlush")}
}

func (_c *MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call) Run(run func()) *MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call) Return(bytes []byte, duration time.Duration, err error) *MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call {
	_c.Call.Return(bytes, duration, err)
	return _c
}

func (_c *MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call) RunAndReturn(run func() ([]byte, time.Duration, error)) *MockAudioMixer_GetAllAvailableMixedAudioAndFlush_Call {
	_c.Call.Return(run)
	return _c
}

// GetDominantSpeaker provides a mock function for the type MockAudioMixer
func (_mock *MockAudioMixer) GetDominantSpeaker() (discord.UserID, float32) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDominantSpeaker")
	}

	var r0 discord.UserID
	var r1 float32
	if returnFunc, ok := ret.Get(0).(func() (discord.UserID, float32)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() discord.UserID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(discord.UserID)
	}
	if returnFunc, ok := ret.Get(1).(func() float32); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(float32)
	}
	return r0, r1
}

// MockAudioMixer_GetDominantSpeaker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDominantSpeaker'
type MockAudioMixer_GetDominantSpeaker_Call struct {
	*mock.Call
}

// GetDominantSpeaker is a helper method to define mock.On call
func (_e *MockAudioMixer_Expecter) GetDominantSpeaker() *MockAudioMixer_GetDominantSpeaker_Call {
	return &MockAudioMixer_GetDominantSpeaker_Call{Call: _e.mock.On("GetDominantSpeaker")}
}

func (_c *MockAudioMixer_GetDominantSpeaker_Call) Run(run func()) *MockAudioMixer_GetDominantSpeaker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAudioMixer_GetDominantSpeaker_Call) Return(userID discord.UserID, f float32) *MockAudioMixer_GetDominantSpeaker_Call {
	_c.Call.Return(userID, f)
	return _c
}

func (_c *MockAudioMixer_GetDominantSpeaker_Call) RunAndReturn(run func() (discord.UserID, float32)) *MockAudioMixer_GetDominantSpeaker_Call {
	_c.Call.Return(run)
	return _c
}

// GetMixedAudio provides a mock function for the type MockAudioMixer
func (_mock *MockAudioMixer) GetMixedAudio(duration time.Duration) ([]byte, error) {
	ret := _mock.Called(duration)

	if len(ret) == 0 {
		panic("no return value specified for GetMixedAudio")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Duration) ([]byte, error)); ok {
		return returnFunc(duration)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Duration) []byte); ok {
		r0 = returnFunc(duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = returnFunc(duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAudioMixer_GetMixedAudio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMixedAudio'
type MockAudioMixer_GetMixedAudio_Call struct {
	*mock.Call
}

// GetMixedAudio is a helper method to define mock.On call
//   - duration
func (_e *MockAudioMixer_Expecter) GetMixedAudio(duration interface{}) *MockAudioMixer_GetMixedAudio_Call {
	return &MockAudioMixer_GetMixedAudio_Call{Call: _e.mock.On("GetMixedAudio", duration)}
}

func (_c *MockAudioMixer_GetMixedAudio_Call) Run(run func(duration time.Duration)) *MockAudioMixer_GetMixedAudio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockAudioMixer_GetMixedAudio_Call) Return(bytes []byte, err error) *MockAudioMixer_GetMixedAudio_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockAudioMixer_GetMixedAudio_Call) RunAndReturn(run func(duration time.Duration) ([]byte, error)) *MockAudioMixer_GetMixedAudio_Call {
	_c.Call.Return(run)
	return _c
}
