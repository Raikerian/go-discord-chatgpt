// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package test

import (
	"github.com/Raikerian/go-discord-chatgpt/pkg/openai"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPricingService creates a new instance of MockPricingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPricingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPricingService {
	mock := &MockPricingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPricingService is an autogenerated mock type for the PricingService type
type MockPricingService struct {
	mock.Mock
}

type MockPricingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPricingService) EXPECT() *MockPricingService_Expecter {
	return &MockPricingService_Expecter{mock: &_m.Mock}
}

// CalculateAudioTokenCost provides a mock function for the type MockPricingService
func (_mock *MockPricingService) CalculateAudioTokenCost(modelName string, inputAudioTokens int, outputAudioTokens int) (float64, error) {
	ret := _mock.Called(modelName, inputAudioTokens, outputAudioTokens)

	if len(ret) == 0 {
		panic("no return value specified for CalculateAudioTokenCost")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (float64, error)); ok {
		return returnFunc(modelName, inputAudioTokens, outputAudioTokens)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) float64); ok {
		r0 = returnFunc(modelName, inputAudioTokens, outputAudioTokens)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(modelName, inputAudioTokens, outputAudioTokens)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPricingService_CalculateAudioTokenCost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateAudioTokenCost'
type MockPricingService_CalculateAudioTokenCost_Call struct {
	*mock.Call
}

// CalculateAudioTokenCost is a helper method to define mock.On call
//   - modelName
//   - inputAudioTokens
//   - outputAudioTokens
func (_e *MockPricingService_Expecter) CalculateAudioTokenCost(modelName interface{}, inputAudioTokens interface{}, outputAudioTokens interface{}) *MockPricingService_CalculateAudioTokenCost_Call {
	return &MockPricingService_CalculateAudioTokenCost_Call{Call: _e.mock.On("CalculateAudioTokenCost", modelName, inputAudioTokens, outputAudioTokens)}
}

func (_c *MockPricingService_CalculateAudioTokenCost_Call) Run(run func(modelName string, inputAudioTokens int, outputAudioTokens int)) *MockPricingService_CalculateAudioTokenCost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPricingService_CalculateAudioTokenCost_Call) Return(f float64, err error) *MockPricingService_CalculateAudioTokenCost_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockPricingService_CalculateAudioTokenCost_Call) RunAndReturn(run func(modelName string, inputAudioTokens int, outputAudioTokens int) (float64, error)) *MockPricingService_CalculateAudioTokenCost_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateCachedTokenCost provides a mock function for the type MockPricingService
func (_mock *MockPricingService) CalculateCachedTokenCost(modelName string, cachedInputTokens int, newInputTokens int, outputTokens int) (float64, error) {
	ret := _mock.Called(modelName, cachedInputTokens, newInputTokens, outputTokens)

	if len(ret) == 0 {
		panic("no return value specified for CalculateCachedTokenCost")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int, int) (float64, error)); ok {
		return returnFunc(modelName, cachedInputTokens, newInputTokens, outputTokens)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int, int) float64); ok {
		r0 = returnFunc(modelName, cachedInputTokens, newInputTokens, outputTokens)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int, int) error); ok {
		r1 = returnFunc(modelName, cachedInputTokens, newInputTokens, outputTokens)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPricingService_CalculateCachedTokenCost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateCachedTokenCost'
type MockPricingService_CalculateCachedTokenCost_Call struct {
	*mock.Call
}

// CalculateCachedTokenCost is a helper method to define mock.On call
//   - modelName
//   - cachedInputTokens
//   - newInputTokens
//   - outputTokens
func (_e *MockPricingService_Expecter) CalculateCachedTokenCost(modelName interface{}, cachedInputTokens interface{}, newInputTokens interface{}, outputTokens interface{}) *MockPricingService_CalculateCachedTokenCost_Call {
	return &MockPricingService_CalculateCachedTokenCost_Call{Call: _e.mock.On("CalculateCachedTokenCost", modelName, cachedInputTokens, newInputTokens, outputTokens)}
}

func (_c *MockPricingService_CalculateCachedTokenCost_Call) Run(run func(modelName string, cachedInputTokens int, newInputTokens int, outputTokens int)) *MockPricingService_CalculateCachedTokenCost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockPricingService_CalculateCachedTokenCost_Call) Return(f float64, err error) *MockPricingService_CalculateCachedTokenCost_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockPricingService_CalculateCachedTokenCost_Call) RunAndReturn(run func(modelName string, cachedInputTokens int, newInputTokens int, outputTokens int) (float64, error)) *MockPricingService_CalculateCachedTokenCost_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateTokenCost provides a mock function for the type MockPricingService
func (_mock *MockPricingService) CalculateTokenCost(modelName string, inputTokens int, outputTokens int) (float64, error) {
	ret := _mock.Called(modelName, inputTokens, outputTokens)

	if len(ret) == 0 {
		panic("no return value specified for CalculateTokenCost")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (float64, error)); ok {
		return returnFunc(modelName, inputTokens, outputTokens)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) float64); ok {
		r0 = returnFunc(modelName, inputTokens, outputTokens)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(modelName, inputTokens, outputTokens)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPricingService_CalculateTokenCost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateTokenCost'
type MockPricingService_CalculateTokenCost_Call struct {
	*mock.Call
}

// CalculateTokenCost is a helper method to define mock.On call
//   - modelName
//   - inputTokens
//   - outputTokens
func (_e *MockPricingService_Expecter) CalculateTokenCost(modelName interface{}, inputTokens interface{}, outputTokens interface{}) *MockPricingService_CalculateTokenCost_Call {
	return &MockPricingService_CalculateTokenCost_Call{Call: _e.mock.On("CalculateTokenCost", modelName, inputTokens, outputTokens)}
}

func (_c *MockPricingService_CalculateTokenCost_Call) Run(run func(modelName string, inputTokens int, outputTokens int)) *MockPricingService_CalculateTokenCost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPricingService_CalculateTokenCost_Call) Return(f float64, err error) *MockPricingService_CalculateTokenCost_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockPricingService_CalculateTokenCost_Call) RunAndReturn(run func(modelName string, inputTokens int, outputTokens int) (float64, error)) *MockPricingService_CalculateTokenCost_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableModels provides a mock function for the type MockPricingService
func (_mock *MockPricingService) GetAvailableModels() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableModels")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockPricingService_GetAvailableModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableModels'
type MockPricingService_GetAvailableModels_Call struct {
	*mock.Call
}

// GetAvailableModels is a helper method to define mock.On call
func (_e *MockPricingService_Expecter) GetAvailableModels() *MockPricingService_GetAvailableModels_Call {
	return &MockPricingService_GetAvailableModels_Call{Call: _e.mock.On("GetAvailableModels")}
}

func (_c *MockPricingService_GetAvailableModels_Call) Run(run func()) *MockPricingService_GetAvailableModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPricingService_GetAvailableModels_Call) Return(strings []string) *MockPricingService_GetAvailableModels_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockPricingService_GetAvailableModels_Call) RunAndReturn(run func() []string) *MockPricingService_GetAvailableModels_Call {
	_c.Call.Return(run)
	return _c
}

// GetContextSize provides a mock function for the type MockPricingService
func (_mock *MockPricingService) GetContextSize(modelName string) (int, error) {
	ret := _mock.Called(modelName)

	if len(ret) == 0 {
		panic("no return value specified for GetContextSize")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(modelName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(modelName)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(modelName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPricingService_GetContextSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContextSize'
type MockPricingService_GetContextSize_Call struct {
	*mock.Call
}

// GetContextSize is a helper method to define mock.On call
//   - modelName
func (_e *MockPricingService_Expecter) GetContextSize(modelName interface{}) *MockPricingService_GetContextSize_Call {
	return &MockPricingService_GetContextSize_Call{Call: _e.mock.On("GetContextSize", modelName)}
}

func (_c *MockPricingService_GetContextSize_Call) Run(run func(modelName string)) *MockPricingService_GetContextSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPricingService_GetContextSize_Call) Return(n int, err error) *MockPricingService_GetContextSize_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPricingService_GetContextSize_Call) RunAndReturn(run func(modelName string) (int, error)) *MockPricingService_GetContextSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelPricing provides a mock function for the type MockPricingService
func (_mock *MockPricingService) GetModelPricing(modelName string) (*openai.ModelInfo, error) {
	ret := _mock.Called(modelName)

	if len(ret) == 0 {
		panic("no return value specified for GetModelPricing")
	}

	var r0 *openai.ModelInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*openai.ModelInfo, error)); ok {
		return returnFunc(modelName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *openai.ModelInfo); ok {
		r0 = returnFunc(modelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openai.ModelInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(modelName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPricingService_GetModelPricing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelPricing'
type MockPricingService_GetModelPricing_Call struct {
	*mock.Call
}

// GetModelPricing is a helper method to define mock.On call
//   - modelName
func (_e *MockPricingService_Expecter) GetModelPricing(modelName interface{}) *MockPricingService_GetModelPricing_Call {
	return &MockPricingService_GetModelPricing_Call{Call: _e.mock.On("GetModelPricing", modelName)}
}

func (_c *MockPricingService_GetModelPricing_Call) Run(run func(modelName string)) *MockPricingService_GetModelPricing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPricingService_GetModelPricing_Call) Return(modelInfo *openai.ModelInfo, err error) *MockPricingService_GetModelPricing_Call {
	_c.Call.Return(modelInfo, err)
	return _c
}

func (_c *MockPricingService_GetModelPricing_Call) RunAndReturn(run func(modelName string) (*openai.ModelInfo, error)) *MockPricingService_GetModelPricing_Call {
	_c.Call.Return(run)
	return _c
}

// GetPricingData provides a mock function for the type MockPricingService
func (_mock *MockPricingService) GetPricingData() *openai.PricingData {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPricingData")
	}

	var r0 *openai.PricingData
	if returnFunc, ok := ret.Get(0).(func() *openai.PricingData); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openai.PricingData)
		}
	}
	return r0
}

// MockPricingService_GetPricingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPricingData'
type MockPricingService_GetPricingData_Call struct {
	*mock.Call
}

// GetPricingData is a helper method to define mock.On call
func (_e *MockPricingService_Expecter) GetPricingData() *MockPricingService_GetPricingData_Call {
	return &MockPricingService_GetPricingData_Call{Call: _e.mock.On("GetPricingData")}
}

func (_c *MockPricingService_GetPricingData_Call) Run(run func()) *MockPricingService_GetPricingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPricingService_GetPricingData_Call) Return(pricingData *openai.PricingData) *MockPricingService_GetPricingData_Call {
	_c.Call.Return(pricingData)
	return _c
}

func (_c *MockPricingService_GetPricingData_Call) RunAndReturn(run func() *openai.PricingData) *MockPricingService_GetPricingData_Call {
	_c.Call.Return(run)
	return _c
}
